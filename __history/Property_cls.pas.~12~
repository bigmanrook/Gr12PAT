unit Property_cls;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls;


type
  TProperty = class(TObject)

  private
    { Private declarations }
    fPropertyNo : Integer;
    fPropertyArea : Real;
    fPropertyLocation : String;



  public
    { Public declarations }
   constructor Create( iPropertyNo: Integer; sPropertyOwner, sPropertyLocation  : String; TCompleteDate : TDateTime; sPropertyValue : String;  rPropertyArea, rPropertyPerimeter : Real; bforSale, btoLet : Boolean);
   function ToString(): String;
   procedure setPropertyArea(rPropertyArea : Real);
   procedure setPropertyPerimeter(rPropertyPerimeter : Real);
   function calculateValue (rPropertyArea : Real) : String;

  end;


implementation

{ TProperty }

function TProperty.calculateValue(rPropertyArea: Real): String;
begin
 //Calculate property value per m^2 (Let us say constant R/m^2 = R10000)
end;

constructor TProperty.Create(iPropertyNo: Integer; sPropertyOwner,
  sPropertyLocation: String; TCompleteDate: TDateTime; sPropertyValue: String;
  rPropertyArea, rPropertyPerimeter: Real; bforSale, btoLet: Boolean);
begin

end;

procedure TProperty.setPropertyArea(rPropertyArea: Real);
begin
  //Whatever area the user decides, area cannot be greater than the square of perimeter/4
end;

procedure TProperty.setPropertyPerimeter(rPropertyPerimeter: Real);
begin
  //Whatever perimeter the user decides. area cannot be greater than the square of perimeter/4
end;

function TProperty.ToString: String;
begin
  //Return a summary of properties under each name
end;

end.
